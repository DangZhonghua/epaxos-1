syntax = "proto3";
package epaxospb;

import "github.com/gogo/protobuf/gogoproto/gogo.proto";

// Span represents a span of Keys that a Command operates on.
message Span {
    option (gogoproto.goproto_stringer) = false;

    // The key for request. If the request operates on a range, this
    // represents the starting key for the range.
    bytes key = 1 [(gogoproto.casttype) = "Key"];

    // The end key is empty if the request spans only a single key. Otherwise,
    // it must order strictly after Key. In such a case, the header indicates
    // that the operation takes place on the key range from Key to EndKey,
    // including Key and excluding EndKey.
    bytes end_key = 2 [(gogoproto.casttype) = "Key"];
}

message Command {
    option (gogoproto.goproto_stringer) = false;

    bytes id     = 1 [(gogoproto.customname) = "ID", (gogoproto.nullable) = false,
        (gogoproto.customtype) = "github.com/cockroachdb/cockroach/pkg/util/uuid.UUID"];
    Span span    = 2 [(gogoproto.nullable) = false];
    bool writing = 3;
    bytes data   = 4;
}

message Dependency {
    uint64 replica_id = 1 [(gogoproto.customname) = "ReplicaID", 
                          (gogoproto.casttype)   = "ReplicaID"];
    uint64 instance_num = 2 [(gogoproto.casttype)   = "InstanceNum"];
}


// message Request {
//     Command command = 1;
// }

// message RequestReply {

// }

// message Prepare {

// }

message InstanceMeta {
    uint64 replica      = 1 [(gogoproto.casttype) = "ReplicaID"];
    uint64 instance_num = 2 [(gogoproto.casttype) = "InstanceNum"];
}

message InstanceState {
    Command command = 1;
    uint64  seq_num = 2 [(gogoproto.casttype) = "SeqNum"];
    repeated Dependency deps = 3 [(gogoproto.nullable) = false];
}

message PreAccept {
    InstanceState state = 1 [(gogoproto.nullable) = false, (gogoproto.embed) = true];
}

// PreAcceptOK is used to respond to a PreAccept message is cases where the
// remote replica has no new information about the proposed command.
message PreAcceptOK {}

// PreAcceptReply is used to respond to a PreAccept message in cases whe the
// remote replica has new information about the proposed command. This new
// information may either be a larger sequence number or extra dependencies.
message PreAcceptReply {
    uint64 updated_seq_num = 1 [(gogoproto.casttype) = "SeqNum"];
    repeated Dependency updated_deps = 2 [(gogoproto.nullable) = false];
}

message Accept {
    InstanceState state = 1 [(gogoproto.nullable) = false, (gogoproto.embed) = true];
}

message AcceptOK {}

message Commit {
    InstanceState state = 1 [(gogoproto.nullable) = false, (gogoproto.embed) = true];
}

// Ballot is a ballot number that ensures message freshness.
message Ballot {
   uint64 Epoch  = 1;
   uint64 Number = 2;
   uint64 ReplicaID = 3 [(gogoproto.casttype) = "ReplicaID"];
}

message Message {
    // to is the destination of the message.
    uint64 to = 1 [(gogoproto.casttype) = "ReplicaID"];
    // ballot is the message's ballot number.
    Ballot ballot = 2 [(gogoproto.nullable) = false];
    // instance_meta holds information of the message's corresponding instance.
    InstanceMeta instance_meta = 3 [(gogoproto.nullable) = false];
    // type is a union of different message types.
    oneof type {
        PreAccept      pre_accept       = 4;
        PreAcceptOK    pre_accept_ok    = 5;
        PreAcceptReply pre_accept_reply = 6;
        Accept         accept           = 7;
        AcceptOK       accept_ok        = 8;
        Commit         commit           = 9;
    }
}
